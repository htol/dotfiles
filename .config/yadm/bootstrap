#!/bin/bash

set -e

update_shell_env()
{
  . $HOME/.config/common_env
}

update_shell_env

update=""
main()
{
    while getopts ":r:u" flag; do
        case "${flag}" in
            u)
                update="true"
                ;;
            r)
                update=${OPTARG}
                ;;
        esac
    done
    # echo ${update}
}

main "$@"

# Linux, Darwin, FreeBSD
system_type=$(uname -s)

cd "$HOME"
LOCAL="${XDG_DATA_HOME:-$HOME/.local}"
CONF="${XDG_CONFIG_HOME:-$HOME/.config}"

yadm gitconfig core.worktree $HOME

echo "== Updating the yadm repo origin URL"
yadm remote set-url origin "git@github.com:htol/dotfiles.git"

echo "== Init submodules"
yadm submodule update --recursive --init --remote


if [ "$system_type" = "Linux" ]; then
    if [[ ! -d "${LOCAL}/nvim" || ${update} == "nvim" ]]; then
        echo "== Getting neovim build"
        rm -rf ${LOCAL}/nvim
        mkdir -p ${LOCAL}/nvim
        cd ${LOCAL}/nvim
        NVIM_VERSION="v0.9.4"
        curl -LO https://github.com/neovim/neovim/releases/download/${NVIM_VERSION}/nvim-linux64.tar.gz
        tar xvfz nvim-linux64.tar.gz
        #nvim="${LOCAL}/nvim/nvim-linux64/bin/nvim"
        curl -LO https://github.com/neovim/neovim/releases/download/${NVIM_VERSION}/nvim.appimage
        chmod u+x nvim.appimage
        ./nvim.appimage --appimage-extract
        nvim="${LOCAL}/nvim/squashfs-root/bin/nvim"
    fi
fi

if [[ "$system_type" = "Linux" || "$system_type" = "Darwin" ]]; then

    if [[ ! -d "${CONF}/nvim/vim_undodir" ]]; then
        echo "== Creating vim_undodir"
        mkdir -p "${CONF}/nvim/vim_undodir"
    fi

  # node.js version manager and Node LTS
  if [[ ! -d "${LOCAL}/fnm" || ${update} = true ]]; then
    echo "== Installing fnm, Node, yarn"
    export FNM_DIR="${LOCAL}/fnm"
    export PATH=$FNM_DIR:$PATH
    curl -fsSL https://github.com/Schniz/fnm/raw/master/.ci/install.sh | bash -s -- --skip-shell --install-dir ${LOCAL}/fnm
    eval `fnm env --shell=bash`
    fnm install --lts
    fnm default lts-latest
    npm install --global npm yarn npx neovim pyright @vue/language-server \
        emmet-ls yaml-language-server vscode-langservers-extracted \
        typescript typescript-language-server
  fi

  # installing pyenv
  if [[ ! -d "${LOCAL}/pyenv" || ${update} = true ]]; then
    echo "== Installing pyenv"
    #git -C ${LOCAL}/pyenv pull || git clone https://github.com/pyenv/pyenv.git ${LOCAL}/pyenv
    #git -C $(pyenv root)/plugins/pyenv-update pull || git clone https://github.com/pyenv/pyenv-update.git $(pyenv root)/plugins/pyenv-update
    #git -C $(pyenv root)/plugins/pyenv-virtualenv pull || git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv
  fi

  # installing poetry
  if [[ ! -d "${LOCAL}/poetry" || ${update} = true ]]; then
    echo "== Installing poetry"
    # Should use already defined POETRY_HOME as destination
    curl -sSL https://install.python-poetry.org | python3 - --git https://github.com/python-poetry/poetry.git@master
    mkdir -p ${CONF}/fish/completions/
    poetry completions fish > ${CONF}/fish/completions/poetry.fish
    # TODO: check local paths for bash completion
    # sudo poetry completions bash > /etc/bash_completion.d/poetry.bash-completion
  fi

  # installing ansible
  if [[ ! -d "${LOCAL}/ansible" || ${update} = true ]]; then
    echo "== Installing ansible"
    git -C ${LOCAL}/ansible pull || git clone --depth 1 https://github.com/ansible/ansible.git ${LOCAL}/ansible
    # . ~/.local/ansible/hacking/env-setup
    # cd ~/.local/ansible
    # python3 -m venv venv
    # . venv/bin/activate
    # pip install -r requirements.txt
    # cd
  fi

  # installing sdkman
  if [[ ! -d "${LOCAL}/sdkman" || ${update} = true || ${update} = sdkman ]]; then
    echo "== Installing sdkman"
    if [[ ! -f "${LOCAL}/sdkman/bin/sdkman-init.sh" ]]; then
        curl -s "https://get.sdkman.io" | bash
    else
        source "${LOCAL}/sdkman/bin/sdkman-init.sh"
        sdk selfupdate force
    fi
  fi

  # installing fisher and plugins
  if [[ ! -f "${CONF}/fish/functions/fisher.fish" || ${update} = true || ${update} = fish ]]; then
      echo "== Installing fisher and plugins"
      /usr/bin/env fish -c 'curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher jomik/fish-gruvbox jethrokuan/fzf'
  fi

fi # Linux or Darwin

# TODO: move brew/macos/linux bootstrap here or in better place.

if [ "$system_type" = "Darwin" ]; then
    PREF="$HOME/Library/Preferences"

	###############################################################################
	# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
	###############################################################################
    # Trackpad: enable tap to click for this user and for the login screen
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
    defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

    # Disable “natural” (Lion-style) scrolling
    defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

    # Increase sound quality for Bluetooth headphones/headsets
    defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

    # Set a fast keyboard repeat rate
	defaults write NSGlobalDomain KeyRepeat -int 2
	defaults write NSGlobalDomain InitialKeyRepeat -int 15

	# Show language menu in the top right corner of the boot screen
    sudo defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool true

    # Shortcuts
    defaults write -g NSUserKeyEquivalents -dict-add "Lock Screen" "@l"
    #defaults write com.apple.universalaccess com.apple.custommenu.apps -array-add NSGlobalDomain

    ###############################################################################
    # iterm2                                                                      #
    ###############################################################################
    #defaults write com.googlecode.iterm2 "PrefsCustomFolder" -string "$HOME/.config/iterm"
    #defaults write com.googlecode.iterm2 "LoadPrefsFromCustomFolder" -bool true
    /usr/libexec/PlistBuddy -c 'set "New Bookmarks":0:"Scrollback Lines" 50000' $PREF/com.googlecode.iterm2.plist

	###############################################################################
    # Finder                                                                      #
    ###############################################################################

    # Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons
    defaults write com.apple.finder QuitMenuItem -bool true

    # Set ~/dev as the default location for new Finder windows
    # mkdir -p "${HOME}/dev/"
    # defaults write com.apple.finder NewWindowTarget -string "PfLo"
    # defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/dev/"

    # Finder: show hidden files by default
    #defaults write com.apple.finder AppleShowAllFiles -bool true

    # When performing a search, search the current folder by default
    defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

    # Disable the warning when changing a file extension
    defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

    # Avoid creating .DS_Store files on network or USB volumes
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
    defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

    # Use list view in all Finder windows by default
    # Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
    defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

    # Show the ~/Library folder
    chflags nohidden ~/Library

    # Show the /Volumes folder
    sudo chflags nohidden /Volumes

    ###############################################################################
    # Dock, Dashboard, and hot corners                                            #
    ###############################################################################

    # Minimize windows into their application’s icon
    defaults write com.apple.dock minimize-to-application -bool true

    # Change minimize/maximize window effect
    defaults write com.apple.dock mineffect -string "scale"

    # Remove the auto-hiding Dock delay
    defaults write com.apple.dock autohide-delay -float 0

    # Automatically hide and show the Dock
    defaults write com.apple.dock autohide -bool true


    ###############################################################################
    # Mail                                                                        #
    ###############################################################################

    # Disable send and reply animations in Mail.app
    # defaults write com.apple.mail DisableReplyAnimations -bool true
    # defaults write com.apple.mail DisableSendAnimations -bool true

    # Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app
    defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false

    # Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app
    defaults write com.apple.mail NSUserKeyEquivalents -dict-add "Send" "@\U21a9"

    # Display emails in threaded mode, sorted by date (oldest at the top)
    defaults write com.apple.mail DraftsViewerAttributes -dict-add "DisplayInThreadedMode" -string "yes"
    defaults write com.apple.mail DraftsViewerAttributes -dict-add "SortedDescending" -string "yes"
    defaults write com.apple.mail DraftsViewerAttributes -dict-add "SortOrder" -string "received-date"

    # Disable inline attachments (just show the icons)
    defaults write com.apple.mail DisableInlineAttachmentViewing -bool true

    ###############################################################################
    # Kill affected applications                                                  #
    ###############################################################################

    for app in "Activity Monitor" "Dock" "Finder" "Mail"; do
        killall "${app}" &> /dev/null
    done
fi
