#!/bin/sh

set -e

# Linux, Darwin, FreeBSD
system_type=$(uname -s)

cd "$HOME"

yadm gitconfig core.worktree $HOME

echo "== Updating the yadm repo origin URL"
yadm remote set-url origin "git@github.com:htol/dotfiles.git"

echo "== Init submodules"
yadm submodule update --recursive --init --remote

if [ "$system_type" = "Linux" ]; then

  # node.js version manager
  if [ ! -d "${XDG_DATA_HOME:-$HOME/.config}/nvm" ]; then
    echo "== Installing nvm"
    export NVM_DIR="$HOME/.config/nvm"
    mkdir -p $NVM_DIR
    # curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
    git clone https://github.com/nvm-sh/nvm.git $NVM_DIR
    cd "$NVM_DIR"
    git fetch --tags origin
    git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
    cd
  fi

  # installing pyenv
  if [ ! -d "${XDG_DATA_HOME:-$HOME/.local}/pyenv" ]; then
    echo "== Installing pyenv"
    git clone https://github.com/pyenv/pyenv.git ~/.local/pyenv
  fi

  # installing poetry
  if [ ! -d "${XDG_DATA_HOME:-$HOME/.local}/poetry" ]; then
    echo "== Installing poetry"
    curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 - --no-modify-path
    . $HOME/.local/poetry/env
  fi

  # installing ansible
  if [ ! -d "${XDG_DATA_HOME:-$HOME/.local}/ansible" ]; then
    echo "== Installing ansible"
    git clone https://github.com/ansible/ansible.git ~/.local/ansible
    . ~/.local/ansible/hacking/env-setup
    cd ~/.local/ansible
    python3 -m venv venv
    . venv/bin/activate
    pip install -r requirements.txt
    cd
  fi

  # installing oh-my-zsh
  if [ ! -d "${XDG_DATA_HOME:-$HOME/.local}/oh-my-zsh" ]; then
    echo "== Installing oh-my-zsh"
    git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.local/oh-my-zsh
  fi

  echo "== Creating directories for Vim"
  mkdir -p ~/.config/nvim/vim_undodir

  # Download vim-plug
  if [ ! -e "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim ]; then
    echo "Downloading vim-plug..."
    curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  fi
fi # Linux

# Install vim-plug plugins.
# if command -v vim >/dev/null 2>&1; then
#     echo "== Install Vim plugins"
#     vim '+PackUpdate' '+qall'
# fi

# TODO: create directories for vim undo

# TODO: move brew/macos/linux bootstrap here or in better place.

if [ "$system_type" = "Darwin" ]; then
    # iterm
    defaults write com.googlecode.iterm2 "PrefsCustomFolder" -string "$HOME/.config/iterm"
    defaults write com.googlecode.iterm2 "LoadPrefsFromCustomFolder" -bool true

	###############################################################################
	# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
	###############################################################################
    # Trackpad: enable tap to click for this user and for the login screen
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
    defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
    defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

    # Disable “natural” (Lion-style) scrolling
    defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

    # Increase sound quality for Bluetooth headphones/headsets
    defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

    # Set a fast keyboard repeat rate
	defaults write NSGlobalDomain KeyRepeat -int 2
	defaults write NSGlobalDomain InitialKeyRepeat -int 15

	# Show language menu in the top right corner of the boot screen
    sudo defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool true
	
	###############################################################################
    # Finder                                                                      #
    ###############################################################################

    # Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons
    defaults write com.apple.finder QuitMenuItem -bool true

    # Set ~/dev as the default location for new Finder windows
    # mkdir -p "${HOME}/dev/"
    # defaults write com.apple.finder NewWindowTarget -string "PfLo"
    # defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/dev/"

    # Finder: show hidden files by default
    #defaults write com.apple.finder AppleShowAllFiles -bool true

    # When performing a search, search the current folder by default
    defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

    # Disable the warning when changing a file extension
    defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

    # Avoid creating .DS_Store files on network or USB volumes
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
    defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

    # Use list view in all Finder windows by default
    # Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
    defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

    # Show the ~/Library folder
    chflags nohidden ~/Library

    # Show the /Volumes folder
    sudo chflags nohidden /Volumes

    ###############################################################################
    # Dock, Dashboard, and hot corners                                            #
    ###############################################################################

    # Minimize windows into their application’s icon
    defaults write com.apple.dock minimize-to-application -bool true

    # Change minimize/maximize window effect
    defaults write com.apple.dock mineffect -string "scale"

    # Remove the auto-hiding Dock delay
    defaults write com.apple.dock autohide-delay -float 0

    # Automatically hide and show the Dock
    defaults write com.apple.dock autohide -bool true


    ###############################################################################
    # Mail                                                                        #
    ###############################################################################

    # Disable send and reply animations in Mail.app
    # defaults write com.apple.mail DisableReplyAnimations -bool true
    # defaults write com.apple.mail DisableSendAnimations -bool true

    # Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app
    defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false

    # Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app
    defaults write com.apple.mail NSUserKeyEquivalents -dict-add "Send" "@\U21a9"

    # Display emails in threaded mode, sorted by date (oldest at the top)
    defaults write com.apple.mail DraftsViewerAttributes -dict-add "DisplayInThreadedMode" -string "yes"
    defaults write com.apple.mail DraftsViewerAttributes -dict-add "SortedDescending" -string "yes"
    defaults write com.apple.mail DraftsViewerAttributes -dict-add "SortOrder" -string "received-date"

    # Disable inline attachments (just show the icons)
    defaults write com.apple.mail DisableInlineAttachmentViewing -bool true

    ###############################################################################
    # Kill affected applications                                                  #
    ###############################################################################

    for app in "Activity Monitor" "Dock" "Finder" "Mail"; do
        killall "${app}" &> /dev/null
    done
fi
